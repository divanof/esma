

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ** 
 * The architecture assumes some states machine.					*
 * There is four states:								*
 *	idle -> self: 1	- message from master: new client;				*
 *	recv -> self: tick_0: 10s - set timer for waiting data from client;		*
 *	recv -> self: data_0: waiting for new data;					*
 *	recv -> self: data_1: some error;						*
 *	recv -> send: 0; normal transition: all data received;				*
 * 	recv -> done: 1; unnormal transition: has ESMA_POLLERR or timeout by tick_0;	*
 *											*
 * for the 'send' state, all transitions are equivalent to the previous one.		*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/ 

states {
	idle;
	recv;
	send;
	done;
};

trans {
	init ->	idle: 0;
	init -> fini: 3;

	idle -> self: 1;
	idle -> recv: 0;
	idle -> done: 3;

	recv -> self: tick_0: 10s: ESMA_TM_ONESHOT;
	recv -> self: data_0: ESMA_POLLIN;
	recv -> self: data_1: ESMA_POLLERR;
	recv -> send: 0;
	recv -> done: 1;

	send -> self: tick_0: 10s: ESMA_TM_ONESHOT;
	send -> self: data_0: ESMA_POLLOUT;
	send -> self: data_1: ESMA_POLLERR;
	send -> recv: 0;
	send -> done: 1;

	done -> idle: 0;
};
